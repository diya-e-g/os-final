#include <stdio.h>

// Define the process structure
struct processes
{
    int id;     // Process ID
    int bt;     // Burst Time
    int at;     // Arrival Time
    int ct;     // Completion Time
    int tat;    // Turnaround Time
    int wt;     // Waiting Time
};

int main()
{
    int n, i, j, sumtat = 0, sumwt = 0;
    float avgtat = 0, avgwt = 0;

    // Input the number of processes
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Declare an array of processes
    struct processes process[n], temp;

    // Input process ID, arrival time, and burst time for each process
    printf("Enter the process ID, arrival time, and burst time:\n");
    for (i = 0; i < n; i++)
    {
        scanf("%d %d %d", &process[i].id, &process[i].at, &process[i].bt);
    }

    // Arrange processes in ascending order of arrival time using bubble sort
    for (j = 1; j < n; j++)
    {
        for (i = 0; i < n - j; i++)
        {
            if (process[i].at > process[i + 1].at)
            {
                temp = process[i];
                process[i] = process[i + 1];
                process[i + 1] = temp;
            }
        }
    }

    // Calculate completion time, turnaround time, and waiting time for each process
    process[0].ct = process[0].bt;
    process[0].tat = process[0].ct - process[0].at;
    process[0].wt = process[0].tat - process[0].bt;

    for (i = 1; i < n; i++)
    {
        if (process[i - 1].ct < process[i].at)
        {
            process[i].ct = process[i].at + process[i].bt;
        }
        else
        {
            process[i].ct = process[i - 1].ct + process[i].bt;
        }

        process[i].tat = process[i].ct - process[i].at;
        process[i].wt = process[i].tat - process[i].bt;
    }

    // Calculate average turnaround time and average waiting time
    for (i = 0; i < n; i++)
    {
        sumtat += process[i].tat;
        sumwt += process[i].wt;
    }
    avgtat = (float)sumtat / n;
    avgwt = (float)sumwt / n;

    // Arrange processes in ascending order of process ID for output
    for (j = 1; j < n; j++)
    {
        for (i = 0; i < n - j; i++)
        {
            if (process[i].id > process[i + 1].id)
            {
                temp = process[i];
                process[i] = process[i + 1];
                process[i + 1] = temp;
            }
        }
    }

    // Print the details of each process
    printf("\n------ FIRST COME FIRST SERVE SCHEDULING ------\n");
    printf("\nPID\tBT\tAT\tCT\tTAT\tWT\n");
    for (i = 0; i < n; i++)
    {
        printf("%d\t%d\t%d\t%d\t%d\t%d\n", process[i].id, process[i].bt, process[i].at, process[i].ct, process[i].tat, process[i].wt);
    }

    // Print average turnaround time and average waiting time
    printf("\nAverage Turnaround Time: %.2f\n", avgtat);
    printf("Average Waiting Time: %.2f\n", avgwt);

    return 0;
}
